// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdc53814DecodeGolangDeveloperTestTaskStructs(in *jlexer.Lexer, out *InfoList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(InfoList, 0, 0)
			} else {
				*out = InfoList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Info
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc53814EncodeGolangDeveloperTestTaskStructs(out *jwriter.Writer, in InfoList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v InfoList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdc53814EncodeGolangDeveloperTestTaskStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InfoList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc53814EncodeGolangDeveloperTestTaskStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InfoList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdc53814DecodeGolangDeveloperTestTaskStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InfoList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc53814DecodeGolangDeveloperTestTaskStructs(l, v)
}
func easyjsonDdc53814DecodeGolangDeveloperTestTaskStructs1(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "global_id":
			out.GlobalID = int(in.Int())
		case "system_object_id":
			out.SystemObjectID = string(in.String())
		case "ID":
			out.ID = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "AdmArea":
			out.AdmArea = string(in.String())
		case "District":
			out.District = string(in.String())
		case "Address":
			out.Address = string(in.String())
		case "Longitude_WGS84":
			out.LongitudeWGS84 = string(in.String())
		case "Latitude_WGS84":
			out.LatitudeWGS84 = string(in.String())
		case "CarCapacity":
			out.CarCapacity = int(in.Int())
		case "Mode":
			out.Mode = string(in.String())
		case "ID_en":
			out.IDEn = int(in.Int())
		case "Name_en":
			out.NameEn = string(in.String())
		case "AdmArea_en":
			out.AdmAreaEn = string(in.String())
		case "District_en":
			out.DistrictEn = string(in.String())
		case "Address_en":
			out.AddressEn = string(in.String())
		case "Longitude_WGS84_en":
			out.LongitudeWGS84En = string(in.String())
		case "Latitude_WGS84_en":
			out.LatitudeWGS84En = string(in.String())
		case "CarCapacity_en":
			out.CarCapacityEn = int(in.Int())
		case "Mode_en":
			out.ModeEn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdc53814EncodeGolangDeveloperTestTaskStructs1(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"global_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.GlobalID))
	}
	{
		const prefix string = ",\"system_object_id\":"
		out.RawString(prefix)
		out.String(string(in.SystemObjectID))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"AdmArea\":"
		out.RawString(prefix)
		out.String(string(in.AdmArea))
	}
	{
		const prefix string = ",\"District\":"
		out.RawString(prefix)
		out.String(string(in.District))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"Longitude_WGS84\":"
		out.RawString(prefix)
		out.String(string(in.LongitudeWGS84))
	}
	{
		const prefix string = ",\"Latitude_WGS84\":"
		out.RawString(prefix)
		out.String(string(in.LatitudeWGS84))
	}
	{
		const prefix string = ",\"CarCapacity\":"
		out.RawString(prefix)
		out.Int(int(in.CarCapacity))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"ID_en\":"
		out.RawString(prefix)
		out.Int(int(in.IDEn))
	}
	{
		const prefix string = ",\"Name_en\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"AdmArea_en\":"
		out.RawString(prefix)
		out.String(string(in.AdmAreaEn))
	}
	{
		const prefix string = ",\"District_en\":"
		out.RawString(prefix)
		out.String(string(in.DistrictEn))
	}
	{
		const prefix string = ",\"Address_en\":"
		out.RawString(prefix)
		out.String(string(in.AddressEn))
	}
	{
		const prefix string = ",\"Longitude_WGS84_en\":"
		out.RawString(prefix)
		out.String(string(in.LongitudeWGS84En))
	}
	{
		const prefix string = ",\"Latitude_WGS84_en\":"
		out.RawString(prefix)
		out.String(string(in.LatitudeWGS84En))
	}
	{
		const prefix string = ",\"CarCapacity_en\":"
		out.RawString(prefix)
		out.Int(int(in.CarCapacityEn))
	}
	{
		const prefix string = ",\"Mode_en\":"
		out.RawString(prefix)
		out.String(string(in.ModeEn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdc53814EncodeGolangDeveloperTestTaskStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdc53814EncodeGolangDeveloperTestTaskStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdc53814DecodeGolangDeveloperTestTaskStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdc53814DecodeGolangDeveloperTestTaskStructs1(l, v)
}
