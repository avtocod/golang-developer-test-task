// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs(in *jlexer.Lexer, out *URLObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs(out *jwriter.Writer, in URLObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v URLObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URLObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *URLObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URLObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs(l, v)
}
func easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs1(in *jlexer.Lexer, out *SearchObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "global_id":
			if in.IsNull() {
				in.Skip()
				out.GlobalID = nil
			} else {
				if out.GlobalID == nil {
					out.GlobalID = new(int)
				}
				*out.GlobalID = int(in.Int())
			}
		case "system_object_id":
			if in.IsNull() {
				in.Skip()
				out.SystemObjectID = nil
			} else {
				if out.SystemObjectID == nil {
					out.SystemObjectID = new(string)
				}
				*out.SystemObjectID = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(int)
				}
				*out.ID = int(in.Int())
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(string)
				}
				*out.Mode = string(in.String())
			}
		case "id_en":
			if in.IsNull() {
				in.Skip()
				out.IDEn = nil
			} else {
				if out.IDEn == nil {
					out.IDEn = new(int)
				}
				*out.IDEn = int(in.Int())
			}
		case "mode_en":
			if in.IsNull() {
				in.Skip()
				out.ModeEn = nil
			} else {
				if out.ModeEn == nil {
					out.ModeEn = new(string)
				}
				*out.ModeEn = string(in.String())
			}
		case "offset":
			out.Offset = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs1(out *jwriter.Writer, in SearchObject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GlobalID != nil {
		const prefix string = ",\"global_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(*in.GlobalID))
	}
	if in.SystemObjectID != nil {
		const prefix string = ",\"system_object_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SystemObjectID))
	}
	if in.ID != nil {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.ID))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Mode))
	}
	if in.IDEn != nil {
		const prefix string = ",\"id_en\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.IDEn))
	}
	if in.ModeEn != nil {
		const prefix string = ",\"mode_en\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ModeEn))
	}
	{
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs1(l, v)
}
func easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs2(in *jlexer.Lexer, out *PaginationObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = int(in.Int())
		case "offset":
			out.Offset = int(in.Int())
		case "hasNext":
			out.HasNext = bool(in.Bool())
		case "hasPrevious":
			out.HasPrevious = bool(in.Bool())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs2(out *jwriter.Writer, in PaginationObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"hasNext\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasNext))
	}
	{
		const prefix string = ",\"hasPrevious\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPrevious))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaginationObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaginationObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaginationObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaginationObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs2(l, v)
}
func easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs3(in *jlexer.Lexer, out *InfoList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(InfoList, 0, 0)
			} else {
				*out = InfoList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Info
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs3(out *jwriter.Writer, in InfoList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v InfoList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InfoList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InfoList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InfoList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs3(l, v)
}
func easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs4(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "global_id":
			out.GlobalID = int(in.Int())
		case "system_object_id":
			out.SystemObjectID = string(in.String())
		case "ID":
			out.ID = int(in.Int())
		case "Name":
			out.Name = string(in.String())
		case "AdmArea":
			out.AdmArea = string(in.String())
		case "District":
			out.District = string(in.String())
		case "Address":
			out.Address = string(in.String())
		case "Longitude_WGS84":
			out.LongitudeWGS84 = string(in.String())
		case "Latitude_WGS84":
			out.LatitudeWGS84 = string(in.String())
		case "CarCapacity":
			out.CarCapacity = int(in.Int())
		case "Mode":
			out.Mode = string(in.String())
		case "ID_en":
			out.IDEn = int(in.Int())
		case "Name_en":
			out.NameEn = string(in.String())
		case "AdmArea_en":
			out.AdmAreaEn = string(in.String())
		case "District_en":
			out.DistrictEn = string(in.String())
		case "Address_en":
			out.AddressEn = string(in.String())
		case "Longitude_WGS84_en":
			out.LongitudeWGS84En = string(in.String())
		case "Latitude_WGS84_en":
			out.LatitudeWGS84En = string(in.String())
		case "CarCapacity_en":
			out.CarCapacityEn = int(in.Int())
		case "Mode_en":
			out.ModeEn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs4(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"global_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.GlobalID))
	}
	{
		const prefix string = ",\"system_object_id\":"
		out.RawString(prefix)
		out.String(string(in.SystemObjectID))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"AdmArea\":"
		out.RawString(prefix)
		out.String(string(in.AdmArea))
	}
	{
		const prefix string = ",\"District\":"
		out.RawString(prefix)
		out.String(string(in.District))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"Longitude_WGS84\":"
		out.RawString(prefix)
		out.String(string(in.LongitudeWGS84))
	}
	{
		const prefix string = ",\"Latitude_WGS84\":"
		out.RawString(prefix)
		out.String(string(in.LatitudeWGS84))
	}
	{
		const prefix string = ",\"CarCapacity\":"
		out.RawString(prefix)
		out.Int(int(in.CarCapacity))
	}
	{
		const prefix string = ",\"Mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	{
		const prefix string = ",\"ID_en\":"
		out.RawString(prefix)
		out.Int(int(in.IDEn))
	}
	{
		const prefix string = ",\"Name_en\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"AdmArea_en\":"
		out.RawString(prefix)
		out.String(string(in.AdmAreaEn))
	}
	{
		const prefix string = ",\"District_en\":"
		out.RawString(prefix)
		out.String(string(in.DistrictEn))
	}
	{
		const prefix string = ",\"Address_en\":"
		out.RawString(prefix)
		out.String(string(in.AddressEn))
	}
	{
		const prefix string = ",\"Longitude_WGS84_en\":"
		out.RawString(prefix)
		out.String(string(in.LongitudeWGS84En))
	}
	{
		const prefix string = ",\"Latitude_WGS84_en\":"
		out.RawString(prefix)
		out.String(string(in.LatitudeWGS84En))
	}
	{
		const prefix string = ",\"CarCapacity_en\":"
		out.RawString(prefix)
		out.Int(int(in.CarCapacityEn))
	}
	{
		const prefix string = ",\"Mode_en\":"
		out.RawString(prefix)
		out.String(string(in.ModeEn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD0c14475EncodeGolangDeveloperTestTaskStructs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD0c14475DecodeGolangDeveloperTestTaskStructs4(l, v)
}
